#pragma once
/****************************************************************************
** файл:        nbccMath.h
** версия:
** дата:        15.03.2010
** изменен:
** автор:       Майоров А.В., Захаров О.С.
**
** описание:    Математический модуль для рассчета нейронных сетей.
****************************************************************************/

#ifndef _NBCC_MATH_H
#define _NBCC_MATH_H

#define _USE_MATH_DEFINES

#include <math.h>
#include "..\nbclasses\nbcTypes.h"

/****************************************************************************
** Математические преобразования с числами
****************************************************************************/

// Шаблон обмена значениями двух чисел
template<class T>
inline void mathSwap(T &x, T &y){
	T temp = x;
	x = y;
	y = temp;
}

//назначение: округлить с заданной точностью
//параметры:
//  val    - [вх] округляемое значение
//  digits - [вх] количество цифр после нуля
float roundUp ( float val, int32_t digits );

/****************************************************************************
** Статистические функции для вещественных векторов значений
****************************************************************************/

//назначение: вычисление среднего значения по вектору
//параметры:
//  w       - [вх] набор векторов коэффициентов
//  nelms   - [вх] число элементов вектора
float averR32(const Vbp &w, uint32_t nelms);

//назначение: вычисление дисперсии по вектору
//параметры:
//  w       - [вх] набор векторов коэффициентов
//  nelms   - [вх] число элементов вектора
//  aver    - [вх] расчетное математическое ожидание этого же столбца
float dispR32(const Vbp &w, uint32_t nelms, float aver);

//назначение: вычисление качества
//параметры:
//  aver    - [вх] расчетное математическое ожидание
//  disp    - [вх] расчетное качество
float qualR32(float aver, float disp);

//назначение: вычисление математического ожидания, дисперсии и
//            качества для столбца набора векторов
void adqR32(const Vbp &w, uint32_t nelms, float &a, float &d, float &q);

//назначение: вычисление среднего значения по столбцу
//параметры:
//  w       - [вх] набор векторов коэффициентов
//  ncols   - [вх] число примеров
//  ielm    - [вх] индекс элемента, для которого рассчитывается значение
float averColR32(const Vbp *w, uint32_t ncols, uint32_t ielm);

//назначение: вычисление дисперсии по столбцу
//параметры:
//  w       - [вх] набор векторов коэффициентов
//  ncols   - [вх] число примеров
//  ielm    - [вх] индекс элемента, для которого рассчитывается значение
//  aver    - [вх] расчетное математическое ожидание этого же столбца
float dispColR32(const Vbp *w, uint32_t ncols, uint32_t ielm, float aver);

// Поиск минимального значения целочисленного вектора
float minR32(const Vbp &w, uint32_t nelms, uint32_t &imin);

// Поиск максимального значения целочисленного вектора
float maxR32(const Vbp &w, uint32_t nelms, uint32_t &imax);

//назначение: вычисление стабильности, уникальности и качества
//            для соответствующих элементов векторов
//параметры:
//  aown      - [вх] математическое ожидание "Свой"
//  down      - [вх] дисперсия "Свой"
//  aall      - [вх] математическое ожидание "Все чужие"
//  dall      - [вх] дисперсия "Все чужие"
//  ncols     - [вх] число элементов
//  s         - [вых] стабильность
//  o         - [вых] уникальность 
//  q         - [вых] качество
void soqColR32( const Vbp &aown, const Vbp &down, const Vbp &aall, const Vbp & dall, 
                uint32_t ncols, float &s, float &o, float &q);

/****************************************************************************
** Статистические функции для целых векторов значений
****************************************************************************/

//назначение: вычисление среднего значения по вектору бит
//параметры:
//  w         - [вх] набор векторов коэффициентов
//  ncols     - [вх] число векторов коэффициентов
//  ielm      - [вх] номер элемента вектора
float averColU1(const Vbp *w, uint32_t ncols, uint32_t ielm);

//назначение: вычисление среднего значения по вектору
//параметры:
//  w         - [вх] вектор коэффициентов
//  nelms     - [вх] число элементов вектора
float averI32(const Vbp &w, uint32_t nelms);

//назначение: вычисление дисперсии по вектору
//параметры:
//  w         - [вх] набор векторов коэффициентов
//  nelms     - [вх] число элементов вектора
//  aver      - [вх] расчетное математическое ожидание этого же столбца
float dispI32(const Vbp &w, uint32_t nelms, float aver);

//назначение: вычисление качества
//параметры:
//  aver      - [вх] расчетное математическое ожидание
//  disp      - [вх] расчетная дисперсия
//возвращает: качество
float qualI32(float aver, float disp);

// Поиск минимального значения целочисленного вектора
int32_t minI32(const Vbp &w, uint32_t nelms, uint32_t &imin);

// Поиск максимального значения целочисленного вектора
int32_t maxI32(const Vbp &w, uint32_t nelms, uint32_t &imax);

// Подсчет числа нулей в векторе
uint32_t cumNilI32(const Vbp &w, uint32_t nelms);

// Вычисление характеристик для вектора целочисленных значений
void adqI32(const Vbp &w, uint32_t nelms, float &a, float &d, float &q);

// Подсчет отличий между векторами бит
uint32_t diffsU1(const Vbp &w, const Vbp &w2, uint32_t nelms);

// Подсчет отличающихся знаков
uint32_t diffsSignR32(const Vbp &w, float s, uint32_t nelms);

//назначение: вычисление вероятности (со знаком) распределения
//            относительно начала координат
//параметры:
// aver - [вх] математическое ожидание распределения
// disp - [вх] стандартное отклонение
// a    - [вх] левая граница интервала
// b    - [вх] правая граница интервала
//возвращает: значение вероятности
float probNormR32(float aver, float disp, float a, float b);
void probNormR32(const Vbp &aver, const Vbp &disp, uint32_t nelms, float a, float b, Vbp &prob);

#endif
