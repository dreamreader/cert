#ifndef ROW_MATH_H
#define ROW_MATH_H

#include "md5.h"
#include "../nb/nbc.h"

namespace Bc {
  using namespace Nb;

  //----------------------------------------------------------------------------
  //ОПЕРАЦИИ НАД ЧАСТЯМИ ПРИМЕРОВ
  //примечание:
  //  1.предполагается, что число входных и выходных примеров совпадает
  //  2.установлено соответствующее им метаописание
  //  3.память под примеры выделена
  //----------------------------------------------------------------------------

  class RowMath {
  public:
    //Генерация последовательности
    //примечание: размер должен быть кратен байтам
    static bool gen(Matrix::Row &ro);
    //Генерация независимых наборов последовательностей
    static bool gen(Matrix::Rows &rs);

    //Хэширование
    //  ris - входные параметры, n примеров
    //  ro  - выходной параметр, n примеров
    //  a   - дополнение, 1 пример
    //  s   - соль, 1 пример
    //примечания:
    //  out = hash(in,a[k])[1]+s[1] || .. || hash(in,a[k])[k]+s[k]
    //  длина входного и выходного кода должна быть кратна байту
    //  длина дополнения должна совпадать с длиной выходного кода
    //  длина соли и формат произволен
    static bool hash(const Matrix::Rows &ris, Matrix::Row &ro, const Matrix::Row *a=Null, const Matrix::Row *s=Null);

    //Конкатенация примеров
    //примечание:
    //  размер каждой части должен быть кратен байту
    static bool cat(const Matrix::Rows &ris, Matrix::Row &ro);
    //Разделение примеров
    static bool uncat(const Matrix::Row &ri, Matrix::Rows &ros);

    //Формирование значения индикатора по эталонному коду (без соли)
    //  ri  - входные параметры,  1 пример
    //  hlen- усекаемая длина индикатора (бит)
    //  h   - сохраняемое значение хэша
    static bool genhi(const Matrix::Row &ri,  int32_t hlen, Md5Hash &h);

    //Вычисление значения жесткого индикатора (без соли)
    //  ri  - входные параметры
    //  ro  - выходные параметры (значение индикатора)
    //  hlen- усекаемая длина индикатора (бит)
    //  h   - проверочное значение хэша, усеченное до hlen
    static bool hi(const Matrix::Row &ri, Matrix::Row &ro, int32_t hlen, const Md5Hash &h);
  };

}





#endif // ROW_MATH_H
