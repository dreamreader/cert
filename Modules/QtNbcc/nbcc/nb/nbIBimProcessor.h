//////////////////////////////////////////////////////////////////////////
//файл:         nbIBimProcessor.h
//версия:
//дата:
//изменен:
//автор:
//
//цель:       Интерфейс осуществляет трансформацию биометрического образа (БО) или
//            набора биометрических образов (набора БО) в набор
//            векторов биометрических параметров (набор ВБП).
//            Если указанное преобразование невыполнимо, возвращается
//            соответствующий код ошибки.
//
//            Поддерживаются прямые преобразования: 
//            набор БО* -> набор ВБП**
//
//            Интерфейс является консервативным, т.е. регуляция его возможностей
//            сводится к выбору плана преобразования биометрического образа,
//            формата хранения и числа биометрических параметров, извлекаемых из образа.
//            План трансформации определяет формат входных параметров,
//            возможно формат выходных параметров и порядок их обработки.
//            Дополнительно во время преобразования может быть указан образец
//            по образу и подобию формируется набор ВБП.
//////////////////////////////////////////////////////////////////////////
#ifndef _NB_IBIMPROCESSOR_H
#define _NB_IBIMPROCESSOR_H

#include "nbTypes.h"
#include "nbIEventHandler.h"

//СОБЫТИЯ

//Событие: обработка базы биометрических образов в вектора биометрических параметров
//  IBimProcessor* sender
//          paramA - 0
//  int32_t paramB - (входной) 0..max(int32_t)
//возвращает: nbS_OK, nbS_CANCEL
#define nbEVENT_VBP_PROGRESS            (0x00000201)

//.............................................................................
//  ПИК Обработчик биометрических образов
//.............................................................................

// Идентификатор интерфейса nbIBimProcessor
// {731CB35C-FB0F-4e4b-912A-78DBE23D4B05}
static const nbUuid nbUUID_IBIM_PROCESSOR = 
  {0x731cb35c,0xfb0f,0x4e4b,{0x91,0x2a,0x78,0xdb,0xe2,0x3d,0x4b,0x05}};

#undef  nbINTERFACE
#define nbINTERFACE nbIBimProcessor

nbDECLARE_INTERFACE(nbIBimProcessor,nbIUnknown){

  nbMETHOD(queryInterface)(nbTHISc nbRefUuid iid, void **icd) nbPURE;
  nbMETHOD(retain)(nbTHIS) nbPURE;
  nbMETHOD(release)(nbTHIS) nbPURE;

  //Установка обработчика событий от обработчика образов
  //  handler   - [вх] Описатель ПИК Обработчик сообщений
  //возвращает: nbS_OK или код ошибки
  nbMETHOD(setEventHandler)(nbTHISc nbIEventHandler *handler) nbPURE;

  //Обработка базы (вектора) биометрических образов
  //  baseAny   - [вых] Матрица ВБП (память выделяется компонентом)
  //  bimBase   - [вх] Вектор биометрических образов
  //  bimCount  - [вх] Число биометрических образов
  //возвращает: nbS_OK или код ошибки
  nbMETHOD(process)(nbTHISc nbMatrix **any, const nbBim **bimBase, uint32_t bimCount) nbPURE;

  //Запрос шаблона обработки биометрического образа заданного типа
  //  pattern     - [вых] Матрица шаблона параметров био.образа (память выделяется компонентом)
  //  bimType     - [вх] Тип биометрического образа
  //возвращает: nbS_OK или код ошибки
  nbMETHOD(queryProcessRules)(nbTHISc nbMatrix **pattern, nbRefUuid bimType) nbPURE;
  
  //Чтение базы "Все чужие" или "Свой", представленной в виде матрицы ВБП
  //  baseAny     - [вых] Матрица ВБП, содержащую базу (память выделяется компонентом)
  //  maxCount    - [вх] Максимальный размер базы
  //  bimType     - [вх] Тип биометрического образа 
  //  userId      - [вх] Идентификатор базы (0 - база "Все Чужие" для обучения, 1,2,3 - тестовые и обучающие базы "Свой")
  //возвращает: nbS_OK или код ошибки
  nbMETHOD(queryBase)(nbTHISc nbMatrix **any, uint32_t maxCount, nbRefUuid bimType, int32_t userId) nbPURE;
  
  //Освобождение памяти из-под базы "Все Чужие" или базы, полученной во время обработки
  //  baseAny     - [вх] Матрица ВБП, память которую была выделена этим компонентом
  //возвращает: nbS_OK или код ошибки
  nbMETHOD(releaseBase)(nbTHISc nbMatrix *any) nbPURE;
};

#endif
