//////////////////////////////////////////////////////////////////////////
//файл:         FPMaths.h 
//верси€:
//дата:
//изменен:
//автор:				
//
//описание:     ћодуль, поддерживающий функции обработки полученного изображени€
//////////////////////////////////////////////////////////////////////////

#ifndef _FP_MATH_H
#define _FP_MATH_H

#include "../nb/nb.h"
#include "../BimFp.h"


/////////////////////////////////////////////////////////////////////////
//  ласс, поддерживающий вычислени€ дл€ определени€ качества образа
class FPMaths
{
public:
	//  онструктор
	FPMaths();
	// ƒеструктор
	~FPMaths();

	//назначение: определить "хороший" образ или "плохой"
	//параметры:
	//	img - [in] изображение отпечатка пальца
  //  mask - [out] изображение обрабатываемой части изображени€ 
  //              (совпадает с img по размеру, но содержит только 0 и 1)
	//возвращает: действие пользовател€, которое нужно выполнить над образом
	FingerprintAction estimateUserAction (uint8_t img[], uint8_t mask[]);

protected:	
	// „то-то делает и что-то возвращает
	// img	- [in]
	// sImg - [out]
	// возвращает процент области отпечатка пальца на всЄм изображении
	void fp_Segment(uint8_t img[], uint8_t sImg[]);

  void quadrants(uint8_t *mask, uint32_t *lt, uint32_t *rt, uint32_t *lb, uint32_t *rb);

	// „то-то делает и ничего не возвращает
	void imerode(uint8_t img[], int32_t SE);
	// „то-то делает и ничего не возвращает
	void im2bw(uint8_t img[], uint8_t scale, uint8_t inv);
	// „то-то делает и ничего не возвращает
	void bwareaopen(uint8_t img[], uint32_t th, uint32_t conn);
	// „то-то делает и ничего не возвращает
	void bwfill(uint8_t img[]);
	// „то-то делает и ничего не возвращает
	uint8_t graythresh(uint8_t img[]);

private:

};	// class FPMaths


#endif	// _FP_MATH_H
