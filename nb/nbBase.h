//////////////////////////////////////////////////////////////////////////
//файл:
//версия:
//дата:
//изменен:
//автор:        Майоров А.В.
//
//цель:         Объявление базовых платформонезависимых типов данных
//              по ГОСТ Р 52633.4
//
//
//////////////////////////////////////////////////////////////////////////
#ifndef _NB_BASE_H
#define _NB_BASE_H

//.............................................................................
//  СОГЛАШЕНИЕ О РАЗРЯДНОСТИ ТИПОВ НА РАЗНЫХ ПЛАТФОРМАХ
//.............................................................................
//
//  Data Type  LP32  ILP32   ILP64   LLP64   LP64
//  char        8      8      8       8       8
//  short       16    16      16      16      16
//  int         16    32      64      32      32
//  long        32    32      64      32      64
//  long long (int64)         64   
//  pointer     32    32      64      64      64
//
//  DOS                                                         - LP32
//  Microsoft Win32, Unix 32-bit                                - ILP32
//  Most Unix (like Solaris) and Unix-like systems (like Linux) - LP64
//  Microsoft Win64 (X64/IA64)                                  - LLP64
//  HAL                                                         - ILP64
//
//.............................................................................

#undef  _LP32
#undef  _ILP32
#undef  _ILP64
#undef  _LLP64
#undef  _LP64

#if defined(_DOS)
#define _LP32
#define _OS_DOS
#elif defined(__WIN32__) || defined(__WIN32) || defined(_WIN32) || defined(WIN32) || defined(__TOS_WIN__) || defined(__WINDOWS__)
#if defined(_WIN64)
#define _LLP64
#define _OS_WIN
#else  
#define _ILP32
#define _OS_WIN
#endif
#elif defined(_POSIX_VERSION)
#if defined(_M_X64)
#define _LP64
#define _OS_UNIX
#else
#define _ILP64
#endif
#else
//Неизвестная платформа и разрядность процессора
//#error Unknown platform. See basic type definition
#endif


//.............................................................................
//  БАЗОВЫЕ ТИПЫ ДАННЫХ
//.............................................................................
//  Примечания:
//  1. В структурах всегда используется little-endian нотация записи чисел
//  2. В структурах, хранящих указатели размером меньше 64 бит, используется
//     дополнение до 64 бит с помощью макроса nbRESERVED(i)
//  3. Данные выравниваются по границам байт
//  4. В Unix-подобных системах вместо переопределенных типов данных
//      для определения типов используется заголовочный файл <inttypes.h>
//  5. Независимыми от платформы и, соответственно, не переопределяются
//     следующие типы данных:
//      (u)char, (u)short, void, float, double, wchar_t
//  6. Вводятся типы:
//      (u)int8_t, (u)int16_t, (u)int32_t, (u)int64_t
//      wchar_t, float, double, half
//      enum
//      bitfield
//.............................................................................

#pragma pack(1)

typedef signed char         int8_t;
typedef unsigned char       uint8_t;
typedef short               int16_t;
typedef unsigned short      uint16_t;

#include <stdint.h>

// Заполнитель для указателей до 64-бит
#if defined(_ILP64) || defined(_LLP64) || defined(_LP64)
#define nbRESERVED(i)
#else
#define nbRESERVED(i) uint32_t reserved##i;
#endif

#pragma pack()

//.............................................................................
//  СОГЛАШЕНИЯ
//  _MICROSOFT_SPECIFIC - объявлено для компилятора MS Visual Studio
//.............................................................................


#define nbCALL      //__stdcall                 //  Соглашение о вызовах функции:
//  1.Передача параметров справа налево;
//  2.Преобразование аргументов осуществляется по значению,
//    кроме указателей или ссылок;
//  3.Вызываемые функции извлекают свои аргументы из стека
//    самостоятельно;
//  4.По умолчанию к началу имени функции добавляется (_),
//    а в конце (@) и число байт входных параметров в десятичной с.с.;
//  5.Соглашение об условной трансляции не применяется;

 #define nbNOVTABLE


#endif
